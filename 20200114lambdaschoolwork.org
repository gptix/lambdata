* What I expect
In terminal

- [X] go to directory with code in it
- [X] $ pipenv shell
- [X] $ python

- [ ] import the module I made 
>>> import df_utils
NO! ERROR! DUMMY!


correct:
(not in pipenv shell)
$ python
>>> from lambdata_gptix import df_utils
DISCO
>>> df_utils.train_val_test_split(1,3)
(The parameters I entered are nonsense, but the resulting error message shows that the interpreter knows what funtipon I am talking about)


Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/gt/gitstuff/lambdata/lambdata_gptix/df_utils.py", line 21, in train_val_test_split

blah


* Tuesday after class

- [X] Run a style check
- [X] correct any issues you see. 
- [ ] refactor your code to use at least 1 class - remember, be DRY (Don't Repeat Yourself), not WET (Write Every Time)!

- [X] code review! Pair with another student (PMs will facilitate, especially in case of odd numbers), and share your lambdata repo with each other. 
- [X] Read and 
- [ ] review their code
- [ ] check that they have published their package to test PyPI and that it can be installed and used.

- [X] ? Can you follow the code flow/layout?
- [X] ? Can you understand the logic/reasoning for what it is doing?
- [X] ? Could you build with (import and use) or extend on it (as a developer adding more to the codebase)?


For comments and notes, focus on style and design. 

- [ ] Find at least 2 things to compliment and at least 1 constructive criticism. It's also great to learn things from their code, and ask questions if there's something you don't understand. Good code isn't clever - it's clear!

- [ ] fork the repo you are reviewing
- [ ] add a file named review.md with your comments, and 
- [ ] open a pull request so your peer can receive it. 

You can optionally 
- [ ] try GitHub code review functionality, or 
- [ ] use comments in the PR to discuss and iterate.
